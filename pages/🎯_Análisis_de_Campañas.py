# pages/üéØ_An√°lisis_de_Campa√±as.py

import streamlit as st
import pandas as pd
import plotly.express as px
import datetime
import io
import sys
import os
# from datos.carga_datos import cargar_y_limpiar_datos #
# from utils.limpieza import limpiar_valor_kpi, estandarizar_avatar #

# Placeholder for imports if running standalone
def cargar_y_limpiar_datos():
    # Create a more comprehensive dummy DataFrame
    data = {
        'Campa√±a': ['C1 Alpha', 'C1 Alpha', 'C2 Beta', 'C1 Alpha', 'C2 Beta', 'C3 Gamma', 'C1 Alpha', 'C2 Beta', 'C3 Gamma', 'C1 Alpha', None, 'C4 Delta'],
        'Fecha de Invite': pd.to_datetime(['2023-01-01', '2023-01-05', '2023-01-10', '2023-01-15', '2023-01-20', '2023-02-01', '2023-02-05', '2023-02-10', '2023-02-15', '2023-02-20', '2023-03-01', '2023-03-05']),
        '¬øInvite Aceptada?': ['si', 'si', 'no', 'si', 'si', 'si', 'no', 'si', 'si', 'si', 'no', 'si'],
        'Fecha Primer Mensaje': pd.to_datetime([None, '2023-01-06', None, '2023-01-17', '2023-01-22', '2023-02-03', None, '2023-02-12', '2023-02-18', '2023-02-21', None, '2023-03-07']),
        'Respuesta Primer Mensaje': ['no', 'si', None, 'si', 'no', 'si', None, 'si', 'no', 'si', None, 'si'],
        'Sesion Agendada?': ['no', 'si', None, 'no', 'no', 'si', None, 'si', 'no', 'no', None, 'si'],
        'Fecha Sesion': pd.to_datetime([None, '2023-01-10', None, None, None, '2023-02-10', None, '2023-02-20', None, None, None, '2023-03-15']),
        '¬øQui√©n Prospecto?': ['Juan', 'Maria', 'Pedro', 'Juan', 'Maria', 'Ana', 'Juan', 'Pedro', 'Ana', 'Maria', 'Juan', 'Luis'],
        'Pais': ['Colombia', 'Mexico', 'Argentina', 'Colombia', 'Mexico', 'Espa√±a', 'Colombia', 'Argentina', 'Espa√±a', 'Mexico', 'Colombia', 'Chile'],
        'Avatar': ['Emprendedor Endeudado', 'Due√±o PYME', 'Freelancer Exitoso', 'Emprendedor Endeudado', 'Due√±o PYME', 'Coach Consolidado', 'Emprendedor Endeudado', 'Freelancer Exitoso', 'Coach Consolidado', 'Due√±o PYME', 'Emprendedor Endeudado', 'Nuevo Avatar'],
        'Otros Datos': range(12) # to make rows unique for df_original_completo
    }
    df = pd.DataFrame(data)
    df['Fecha de Invite'] = pd.to_datetime(df['Fecha de Invite'])
    df['Fecha Primer Mensaje'] = pd.to_datetime(df['Fecha Primer Mensaje'], errors='coerce')
    df['Fecha Sesion'] = pd.to_datetime(df['Fecha Sesion'], errors='coerce')
    return df

def limpiar_valor_kpi(valor):
    if pd.isna(valor): return ""
    return str(valor).strip().lower()

def estandarizar_avatar(avatar):
    if pd.isna(avatar): return "No Especificado"
    avatar = str(avatar).strip().lower()
    # Add your specific standardization rules here if any
    # Example:
    if "emprendedor" in avatar and "deuda" in avatar: return "Emprendedor Endeudado"
    if "pyme" in avatar: return "Due√±o PYME"
    return avatar.title()


# --- Configuraci√≥n de la P√°gina ---
st.set_page_config(layout="wide", page_title="An√°lisis de Campa√±as")
st.title("üéØ An√°lisis de Rendimiento de Campa√±as")
st.markdown("Selecciona una o varias campa√±as y aplica filtros para analizar su rendimiento detallado.")

# --- Funciones de Ayuda Espec√≠ficas para esta P√°gina ---

@st.cache_data
def obtener_datos_base_campanas():
    df_completo = cargar_y_limpiar_datos() #
    if df_completo is None or df_completo.empty:
        return pd.DataFrame(), pd.DataFrame()

    if 'Campa√±a' not in df_completo.columns:
        st.error("La columna 'Campa√±a' no se encontr√≥ en los datos. Por favor, verifica la hoja de Google Sheets.")
        return pd.DataFrame(), df_completo

    df_base_campanas = df_completo[df_completo['Campa√±a'].notna() & (df_completo['Campa√±a'] != '')].copy()

    date_cols_to_check = ["Fecha de Invite", "Fecha Primer Mensaje", "Fecha Sesion"]
    for col in date_cols_to_check:
        if col in df_base_campanas.columns and not pd.api.types.is_datetime64_any_dtype(df_base_campanas[col]):
            df_base_campanas[col] = pd.to_datetime(df_base_campanas[col], errors='coerce')
        if col in df_completo.columns and not pd.api.types.is_datetime64_any_dtype(df_completo[col]):
             df_completo[col] = pd.to_datetime(df_completo[col], errors='coerce')

    for df_proc in [df_base_campanas, df_completo]:
        if "Avatar" in df_proc.columns:
            df_proc["Avatar"] = df_proc["Avatar"].apply(estandarizar_avatar) #

    return df_base_campanas, df_completo

def inicializar_estado_filtros_campana():
    default_filters = {
        "campana_seleccion_principal": [],
        "campana_filtro_prospectador": ["‚Äì Todos ‚Äì"],
        "campana_filtro_pais": ["‚Äì Todos ‚Äì"],
        "campana_filtro_fecha_ini": None, # Clave para fecha inicio
        "campana_filtro_fecha_fin": None,  # Clave para fecha fin
    }
    for key, value in default_filters.items():
        if key not in st.session_state:
            st.session_state[key] = value
        elif key in ["campana_seleccion_principal", "campana_filtro_prospectador", "campana_filtro_pais"] and not isinstance(st.session_state[key], list):
             st.session_state[key] = default_filters[key]


def resetear_filtros_campana_callback():
    st.session_state.campana_seleccion_principal = []
    st.session_state.campana_filtro_prospectador = ["‚Äì Todos ‚Äì"]
    st.session_state.campana_filtro_pais = ["‚Äì Todos ‚Äì"]
    st.session_state.di_campana_fecha_ini = None
    st.session_state.di_campana_fecha_fin = None
    st.session_state.campana_filtro_fecha_ini = None
    st.session_state.campana_filtro_fecha_fin = None
    st.toast("Todos los filtros de la p√°gina de campa√±as han sido reiniciados.", icon="üßπ")

def calcular_kpis_df_campana(df_filtrado_campana):
    if df_filtrado_campana.empty:
        return {
            "prospectos_tras_filtros": 0, "invites_aceptadas": 0,
            "primeros_mensajes_enviados": 0, "respuestas_primer_mensaje": 0,
            "sesiones_agendadas": 0, "tasa_aceptacion": 0,
            "tasa_respuesta_vs_aceptadas": 0, "tasa_sesion_vs_respuesta": 0,
            "tasa_sesion_global": 0
        }
    prospectos_tras_filtros = len(df_filtrado_campana) # Nombre cambiado para claridad
    invites_aceptadas = sum(limpiar_valor_kpi(x) == "si" for x in df_filtrado_campana.get("¬øInvite Aceptada?", pd.Series(dtype=str))) #
    primeros_mensajes_enviados = sum(
        pd.notna(x) and str(x).strip().lower() not in ["no", "", "nan"]
        for x in df_filtrado_campana.get("Fecha Primer Mensaje", pd.Series(dtype=str))
    )
    respuestas_primer_mensaje = sum(
        limpiar_valor_kpi(x) not in ["no", "", "nan", "none"] #
        for x in df_filtrado_campana.get("Respuesta Primer Mensaje", pd.Series(dtype=str))
    )
    sesiones_agendadas = sum(limpiar_valor_kpi(x) == "si" for x in df_filtrado_campana.get("Sesion Agendada?", pd.Series(dtype=str))) #

    tasa_aceptacion = (invites_aceptadas / prospectos_tras_filtros * 100) if prospectos_tras_filtros > 0 else 0
    tasa_respuesta_vs_aceptadas = (respuestas_primer_mensaje / invites_aceptadas * 100) if invites_aceptadas > 0 else 0
    tasa_sesion_vs_respuesta = (sesiones_agendadas / respuestas_primer_mensaje * 100) if respuestas_primer_mensaje > 0 else 0
    tasa_sesion_global = (sesiones_agendadas / prospectos_tras_filtros * 100) if prospectos_tras_filtros > 0 else 0
    return {
        "prospectos_tras_filtros": int(prospectos_tras_filtros), "invites_aceptadas": int(invites_aceptadas),
        "primeros_mensajes_enviados": int(primeros_mensajes_enviados),
        "respuestas_primer_mensaje": int(respuestas_primer_mensaje),
        "sesiones_agendadas": int(sesiones_agendadas), "tasa_aceptacion": tasa_aceptacion,
        "tasa_respuesta_vs_aceptadas": tasa_respuesta_vs_aceptadas,
        "tasa_sesion_vs_respuesta": tasa_sesion_vs_respuesta,
        "tasa_sesion_global": tasa_sesion_global,
    }

def mostrar_embudo_para_campana(kpis_campana, titulo_embudo="Embudo de Conversi√≥n de Campa√±a"):
    etapas_embudo = [
        "Prospectos (Tras Filtros)", "Invites Aceptadas", # Nombre cambiado para claridad
        "1er Mensaje Enviado", "Respuesta 1er Mensaje", "Sesiones Agendadas"
    ]
    cantidades_embudo = [
        kpis_campana["prospectos_tras_filtros"], kpis_campana["invites_aceptadas"],
        kpis_campana["primeros_mensajes_enviados"], kpis_campana["respuestas_primer_mensaje"],
        kpis_campana["sesiones_agendadas"]
    ]
    if sum(cantidades_embudo) == 0:
        st.info("No hay datos suficientes para generar el embudo de conversi√≥n para la selecci√≥n actual.")
        return

    df_embudo = pd.DataFrame({"Etapa": etapas_embudo, "Cantidad": cantidades_embudo})
    porcentajes_vs_anterior = [100.0]
    for i in range(1, len(df_embudo)):
        porcentaje = (df_embudo['Cantidad'][i] / df_embudo['Cantidad'][i-1] * 100) if df_embudo['Cantidad'][i-1] > 0 else 0.0
        porcentajes_vs_anterior.append(porcentaje)
    df_embudo['% vs Anterior'] = porcentajes_vs_anterior
    df_embudo['Texto'] = df_embudo.apply(lambda row: f"{row['Cantidad']:,} ({row['% vs Anterior']:.1f}%)", axis=1)

    fig_embudo = px.funnel(df_embudo, y='Etapa', x='Cantidad', title=titulo_embudo, text='Texto', category_orders={"Etapa": etapas_embudo})
    fig_embudo.update_traces(textposition='inside', textinfo='text')
    st.plotly_chart(fig_embudo, use_container_width=True)
    st.caption(f"Embudo basado en {kpis_campana['prospectos_tras_filtros']:,} prospectos (tras filtros) para la selecci√≥n actual.")

def generar_tabla_comparativa_campanas_filtrada(
        df_filtrado_con_filtros_pagina,
        lista_nombres_campanas_seleccionadas,
        df_base_campanas_global_param # <-- NUEVO PAR√ÅMETRO
    ):
    datos_comparativa = []
    if df_filtrado_con_filtros_pagina.empty or not lista_nombres_campanas_seleccionadas:
        # Incluso si no hay datos filtrados, podr√≠amos querer mostrar los registros originales
        if not lista_nombres_campanas_seleccionadas:
            return pd.DataFrame(datos_comparativa)
        # Si hay campa√±as seleccionadas pero df_filtrado_con_filtros_pagina est√° vac√≠o
        for nombre_campana in lista_nombres_campanas_seleccionadas:
            total_datos_originales_campana = len(df_base_campanas_global_param[df_base_campanas_global_param['Campa√±a'] == nombre_campana])
            kpis = calcular_kpis_df_campana(pd.DataFrame()) # KPIs ser√°n cero
            datos_comparativa.append({
                "Campa√±a": nombre_campana,
                "Registros Originales": total_datos_originales_campana, # <-- NUEVA M√âTRICA
                "Prospectos (Tras Filtros)": kpis["prospectos_tras_filtros"], # Nombre cambiado
                "Aceptadas": kpis["invites_aceptadas"],
                "Respuestas": kpis["respuestas_primer_mensaje"], "Sesiones": kpis["sesiones_agendadas"],
                "Tasa Aceptaci√≥n (%)": kpis["tasa_aceptacion"],
                "Tasa Respuesta (vs Acept.) (%)": kpis["tasa_respuesta_vs_aceptadas"],
                "Tasa Sesiones (vs Resp.) (%)": kpis["tasa_sesion_vs_respuesta"],
                "Tasa Sesi√≥n Global (%)": kpis["tasa_sesion_global"]
            })
        return pd.DataFrame(datos_comparativa)


    for nombre_campana in lista_nombres_campanas_seleccionadas:
        df_campana_individual_filtrada = df_filtrado_con_filtros_pagina[
            df_filtrado_con_filtros_pagina['Campa√±a'] == nombre_campana
        ]
        kpis = calcular_kpis_df_campana(df_campana_individual_filtrada)
        
        # Calcular total de datos originales para esta campa√±a espec√≠fica
        total_datos_originales_campana = len(df_base_campanas_global_param[df_base_campanas_global_param['Campa√±a'] == nombre_campana])

        datos_comparativa.append({
            "Campa√±a": nombre_campana,
            "Registros Originales": total_datos_originales_campana, # <-- NUEVA M√âTRICA
            "Prospectos (Tras Filtros)": kpis["prospectos_tras_filtros"], # Nombre cambiado
            "Aceptadas": kpis["invites_aceptadas"],
            "Respuestas": kpis["respuestas_primer_mensaje"], "Sesiones": kpis["sesiones_agendadas"],
            "Tasa Aceptaci√≥n (%)": kpis["tasa_aceptacion"],
            "Tasa Respuesta (vs Acept.) (%)": kpis["tasa_respuesta_vs_aceptadas"],
            "Tasa Sesiones (vs Resp.) (%)": kpis["tasa_sesion_vs_respuesta"],
            "Tasa Sesi√≥n Global (%)": kpis["tasa_sesion_global"]
        })
    return pd.DataFrame(datos_comparativa)


# --- Carga de Datos Base ---
df_base_campanas_global, df_original_completo = obtener_datos_base_campanas()
inicializar_estado_filtros_campana()

if df_base_campanas_global.empty:
    st.warning("No se pudieron cargar los datos base de campa√±as. La aplicaci√≥n no puede continuar.")
    st.stop()

# --- Secci√≥n de Selecci√≥n de Campa√±a Principal ---
st.markdown("---")
st.subheader("1. Selecci√≥n de Campa√±a(s)")
lista_campanas_disponibles_global = sorted(df_base_campanas_global['Campa√±a'].unique())
if not lista_campanas_disponibles_global:
    st.warning("No se encontraron nombres de campa√±as en los datos cargados.")
    st.stop()

st.session_state.campana_seleccion_principal = st.multiselect(
    "Elige la(s) campa√±a(s) a analizar:",
    options=lista_campanas_disponibles_global,
    default=st.session_state.campana_seleccion_principal,
    key="ms_campana_seleccion_principal"
)

# --- Secci√≥n de Filtros Adicionales ---
st.markdown("---")
st.subheader("2. Filtros Adicionales")

if st.button("Limpiar Filtros", on_click=resetear_filtros_campana_callback, key="btn_reset_campana_filtros_total"):
    st.rerun()

if not st.session_state.campana_seleccion_principal:
    st.info("Por favor, selecciona al menos una campa√±a para visualizar los datos y aplicar filtros.")
    st.stop()

df_campanas_filtradas_por_seleccion = df_base_campanas_global[
    df_base_campanas_global['Campa√±a'].isin(st.session_state.campana_seleccion_principal)
].copy() # Este es el df base para las campa√±as seleccionadas, ANTES de filtros de p√°gina

with st.expander("Aplicar filtros detallados a la(s) campa√±a(s) seleccionada(s)", expanded=True):
    col_f1, col_f2 = st.columns(2)
    with col_f1:
        # Prospectador
        opciones_prospectador_camp = ["‚Äì Todos ‚Äì"] + sorted(
            df_campanas_filtradas_por_seleccion["¬øQui√©n Prospecto?"].dropna().astype(str).unique()
        )
        default_prospectador = st.session_state.campana_filtro_prospectador
        if not isinstance(default_prospectador, list) or not all(p in opciones_prospectador_camp for p in default_prospectador):
            default_prospectador = ["‚Äì Todos ‚Äì"]
        st.session_state.campana_filtro_prospectador = st.multiselect(
            "¬øQui√©n Prospect√≥?", options=opciones_prospectador_camp,
            default=default_prospectador, key="ms_campana_prospectador"
        )
        # Pa√≠s
        opciones_pais_camp = ["‚Äì Todos ‚Äì"] + sorted(
            df_campanas_filtradas_por_seleccion["Pais"].dropna().astype(str).unique()
        )
        default_pais = st.session_state.campana_filtro_pais
        if not isinstance(default_pais, list) or not all(p in opciones_pais_camp for p in default_pais):
             default_pais = ["‚Äì Todos ‚Äì"]
        st.session_state.campana_filtro_pais = st.multiselect(
            "Pa√≠s del Prospecto", options=opciones_pais_camp,
            default=default_pais, key="ms_campana_pais"
        )
    with col_f2:
        # Fechas
        min_fecha_invite_camp, max_fecha_invite_camp = None, None
        col_fecha_invite = "Fecha de Invite" # Aseg√∫rate que este es el nombre correcto
        if col_fecha_invite in df_campanas_filtradas_por_seleccion.columns and \
           pd.api.types.is_datetime64_any_dtype(df_campanas_filtradas_por_seleccion[col_fecha_invite]):
            valid_dates = df_campanas_filtradas_por_seleccion[col_fecha_invite].dropna()
            if not valid_dates.empty:
                min_fecha_invite_camp = valid_dates.min().date()
                max_fecha_invite_camp = valid_dates.max().date()

        val_fecha_ini = st.date_input(
            "Fecha de Invite Desde:",
            value=st.session_state.campana_filtro_fecha_ini,
            min_value=min_fecha_invite_camp, max_value=max_fecha_invite_camp,
            format="DD/MM/YYYY", key="di_campana_fecha_ini"
        )
        val_fecha_fin = st.date_input(
            "Fecha de Invite Hasta:",
            value=st.session_state.campana_filtro_fecha_fin,
            min_value=min_fecha_invite_camp, max_value=max_fecha_invite_camp,
            format="DD/MM/YYYY", key="di_campana_fecha_fin"
        )
        st.session_state.campana_filtro_fecha_ini = val_fecha_ini
        st.session_state.campana_filtro_fecha_fin = val_fecha_fin


# Aplicar filtros de p√°gina
df_aplicar_filtros = df_campanas_filtradas_por_seleccion.copy() # Comienza con las campa√±as seleccionadas

if st.session_state.campana_filtro_prospectador and "‚Äì Todos ‚Äì" not in st.session_state.campana_filtro_prospectador:
    df_aplicar_filtros = df_aplicar_filtros[
        df_aplicar_filtros["¬øQui√©n Prospecto?"].isin(st.session_state.campana_filtro_prospectador)
    ]
if st.session_state.campana_filtro_pais and "‚Äì Todos ‚Äì" not in st.session_state.campana_filtro_pais:
    df_aplicar_filtros = df_aplicar_filtros[
        df_aplicar_filtros["Pais"].isin(st.session_state.campana_filtro_pais)
    ]

fecha_ini_aplicar = st.session_state.campana_filtro_fecha_ini
fecha_fin_aplicar = st.session_state.campana_filtro_fecha_fin
col_fecha_invite = "Fecha de Invite"

if col_fecha_invite in df_aplicar_filtros.columns and pd.api.types.is_datetime64_any_dtype(df_aplicar_filtros[col_fecha_invite]):
    # Asegurar que la columna de fecha no tenga NaT para la comparaci√≥n, o manejarla
    df_aplicar_filtros[col_fecha_invite] = pd.to_datetime(df_aplicar_filtros[col_fecha_invite], errors='coerce')
    
    if fecha_ini_aplicar and fecha_fin_aplicar:
        fecha_ini_dt = datetime.datetime.combine(fecha_ini_aplicar, datetime.time.min)
        fecha_fin_dt = datetime.datetime.combine(fecha_fin_aplicar, datetime.time.max)
        df_aplicar_filtros = df_aplicar_filtros[
            (df_aplicar_filtros[col_fecha_invite].notna()) &
            (df_aplicar_filtros[col_fecha_invite] >= fecha_ini_dt) &
            (df_aplicar_filtros[col_fecha_invite] <= fecha_fin_dt)
        ]
    elif fecha_ini_aplicar:
        fecha_ini_dt = datetime.datetime.combine(fecha_ini_aplicar, datetime.time.min)
        df_aplicar_filtros = df_aplicar_filtros[
            (df_aplicar_filtros[col_fecha_invite].notna()) &
            (df_aplicar_filtros[col_fecha_invite] >= fecha_ini_dt)
        ]
    elif fecha_fin_aplicar:
        fecha_fin_dt = datetime.datetime.combine(fecha_fin_aplicar, datetime.time.max)
        df_aplicar_filtros = df_aplicar_filtros[
            (df_aplicar_filtros[col_fecha_invite].notna()) &
            (df_aplicar_filtros[col_fecha_invite] <= fecha_fin_dt)
        ]

df_final_analisis_campana = df_aplicar_filtros.copy() # Este es el df FINALMENTE filtrado para an√°lisis

# --- Secci√≥n de Resultados y Visualizaciones ---
st.markdown("---")
st.header(f"üìä Resultados para: {', '.join(st.session_state.campana_seleccion_principal)}")

if df_campanas_filtradas_por_seleccion.empty : # Chequea si la selecci√≥n inicial ya es vac√≠a
    st.warning("No hay datos para la(s) campa√±a(s) seleccionada(s) en el origen.")
elif df_final_analisis_campana.empty and not df_campanas_filtradas_por_seleccion.empty:
    st.warning("No se encontraron prospectos que cumplan con todos los criterios de filtro para la(s) campa√±a(s) seleccionada(s).")
    # A√öN AS√ç MOSTRAR TOTAL REGISTROS ORIGINALES Y TABLA COMPARATIVA CON REGISTROS ORIGINALES
    
    # Calcular total de datos originales para las campa√±as seleccionadas (antes de filtros de p√°gina)
    df_seleccion_original_para_conteo = df_base_campanas_global[
        df_base_campanas_global['Campa√±a'].isin(st.session_state.campana_seleccion_principal)
    ]
    total_datos_originales_seleccion = len(df_seleccion_original_para_conteo)
    
    st.markdown("### Indicadores Clave (KPIs) - Agregado de Selecci√≥n")
    kpi_cols_agg = st.columns(5) # Ajustado a 5 columnas
    kpi_cols_agg[0].metric("Total Registros en Campa√±a(s) (Original)", f"{total_datos_originales_seleccion:,}")

    kpis_vacio = calcular_kpis_df_campana(pd.DataFrame()) # KPIs ser√°n cero
    kpi_cols_agg[1].metric("Prospectos (Tras Filtros)", f"{kpis_vacio['prospectos_tras_filtros']:,}")
    kpi_cols_agg[2].metric("Invites Aceptadas", f"{kpis_vacio['invites_aceptadas']:,}", f"0.0% de Prospectos")
    kpi_cols_agg[3].metric("Respuestas 1er Msj", f"{kpis_vacio['respuestas_primer_mensaje']:,}", f"0.0% de Aceptadas")
    kpi_cols_agg[4].metric("Sesiones Agendadas", f"{kpis_vacio['sesiones_agendadas']:,}", f"0.0% de Prospectos")

    if len(st.session_state.campana_seleccion_principal) > 1:
        st.markdown("---")
        st.header(f"üîÑ Comparativa Detallada entre Campa√±as (afectada por filtros de p√°gina)")
        st.caption("La siguiente tabla compara las campa√±as seleccionadas. 'Registros Originales' muestra el total de datos antes de filtros. Otros KPIs consideran los filtros de '¬øQui√©n Prospect√≥?', 'Pa√≠s' y 'Fechas' aplicados arriba.")
        df_tabla_comp = generar_tabla_comparativa_campanas_filtrada(
            df_final_analisis_campana, # Ser√° un DF vac√≠o, pero la funci√≥n lo maneja
            st.session_state.campana_seleccion_principal,
            df_base_campanas_global # <--- Pasar el DF base global
        )
        if not df_tabla_comp.empty:
            st.subheader("Tabla Comparativa de KPIs (con filtros aplicados)")
            cols_enteros_comp = ["Registros Originales", "Prospectos (Tras Filtros)", "Aceptadas", "Respuestas", "Sesiones"] # A√±adida nueva m√©trica
            format_dict_comp = {"Tasa Aceptaci√≥n (%)": "{:.1f}%", "Tasa Respuesta (vs Acept.) (%)": "{:.1f}%", "Tasa Sesiones (vs Resp.) (%)": "{:.1f}%", "Tasa Sesi√≥n Global (%)": "{:.1f}%"}
            for col_int_comp in cols_enteros_comp:
                if col_int_comp in df_tabla_comp.columns:
                    df_tabla_comp[col_int_comp] = pd.to_numeric(df_tabla_comp[col_int_comp], errors='coerce').fillna(0).astype(int)
                    format_dict_comp[col_int_comp] = "{:,}"
            st.dataframe(df_tabla_comp.sort_values(by="Tasa Sesi√≥n Global (%)", ascending=False).style.format(format_dict_comp), use_container_width=True, hide_index=True)
        else:
            st.info("No hay datos suficientes para la tabla comparativa.")


else: # df_final_analisis_campana NO est√° vac√≠o
    st.markdown("### Indicadores Clave (KPIs) - Agregado de Selecci√≥n")
    
    # Calcular total de datos originales para las campa√±as seleccionadas (antes de filtros de p√°gina)
    df_seleccion_original_para_conteo = df_base_campanas_global[
        df_base_campanas_global['Campa√±a'].isin(st.session_state.campana_seleccion_principal)
    ]
    total_datos_originales_seleccion = len(df_seleccion_original_para_conteo)
    
    kpis_calculados_campana_agregado = calcular_kpis_df_campana(df_final_analisis_campana)
    
    kpi_cols_agg = st.columns(5) # Ajustado a 5 columnas
    kpi_cols_agg[0].metric("Total Registros en Campa√±a(s) (Original)", f"{total_datos_originales_seleccion:,}")
    kpi_cols_agg[1].metric("Prospectos (Tras Filtros)", f"{kpis_calculados_campana_agregado['prospectos_tras_filtros']:,}")
    kpi_cols_agg[2].metric("Invites Aceptadas", f"{kpis_calculados_campana_agregado['invites_aceptadas']:,}",
                           f"{kpis_calculados_campana_agregado['tasa_aceptacion']:.1f}% de Prospectos")
    kpi_cols_agg[3].metric("Respuestas 1er Msj", f"{kpis_calculados_campana_agregado['respuestas_primer_mensaje']:,}",
                           f"{kpis_calculados_campana_agregado['tasa_respuesta_vs_aceptadas']:.1f}% de Aceptadas")
    kpi_cols_agg[4].metric("Sesiones Agendadas", f"{kpis_calculados_campana_agregado['sesiones_agendadas']:,}",
                           f"{kpis_calculados_campana_agregado['tasa_sesion_global']:.1f}% de Prospectos")
    
    if kpis_calculados_campana_agregado['sesiones_agendadas'] > 0 and kpis_calculados_campana_agregado['respuestas_primer_mensaje'] > 0 :
         st.caption(f"Tasa de Sesiones vs Respuestas (Agregado): {kpis_calculados_campana_agregado['tasa_sesion_vs_respuesta']:.1f}%")

    st.markdown("### Embudo de Conversi√≥n - Agregado de Selecci√≥n")
    mostrar_embudo_para_campana(kpis_calculados_campana_agregado, "Embudo de Conversi√≥n (Agregado de Selecci√≥n y Filtros)")

    if len(st.session_state.campana_seleccion_principal) > 1:
        st.markdown("---")
        st.header(f"üîÑ Comparativa Detallada entre Campa√±as (afectada por filtros de p√°gina)")
        st.caption("La siguiente tabla compara las campa√±as seleccionadas. 'Registros Originales' muestra el total de datos antes de filtros. Otros KPIs consideran los filtros de '¬øQui√©n Prospect√≥?', 'Pa√≠s' y 'Fechas' aplicados arriba.")
        
        df_tabla_comp = generar_tabla_comparativa_campanas_filtrada(
            df_final_analisis_campana, # Este es el DF con filtros de p√°gina aplicados
            st.session_state.campana_seleccion_principal,
            df_base_campanas_global # <--- Pasar el DF base global para conteo original
        )
        
        if not df_tabla_comp.empty:
            st.subheader("Tabla Comparativa de KPIs (con filtros aplicados)")
            cols_enteros_comp = ["Registros Originales", "Prospectos (Tras Filtros)", "Aceptadas", "Respuestas", "Sesiones"] # A√±adida nueva m√©trica y nombre cambiado
            format_dict_comp = {"Tasa Aceptaci√≥n (%)": "{:.1f}%", "Tasa Respuesta (vs Acept.) (%)": "{:.1f}%", "Tasa Sesiones (vs Resp.) (%)": "{:.1f}%", "Tasa Sesi√≥n Global (%)": "{:.1f}%"}
            for col_int_comp in cols_enteros_comp:
                if col_int_comp in df_tabla_comp.columns:
                    df_tabla_comp[col_int_comp] = pd.to_numeric(df_tabla_comp[col_int_comp], errors='coerce').fillna(0).astype(int)
                    format_dict_comp[col_int_comp] = "{:,}"
            
            st.dataframe(df_tabla_comp.sort_values(by="Tasa Sesi√≥n Global (%)", ascending=False).style.format(format_dict_comp), use_container_width=True, hide_index=True)
            
            st.subheader("Gr√°fico: Tasa de Sesi√≥n Global por Campa√±a (con filtros aplicados)")
            # Usar 'Prospectos (Tras Filtros)' para la condici√≥n del gr√°fico
            df_graf_comp_tasa_global = df_tabla_comp[df_tabla_comp["Prospectos (Tras Filtros)"] > 0].sort_values(by="Tasa Sesi√≥n Global (%)", ascending=False)
            if not df_graf_comp_tasa_global.empty:
                fig_comp_tsg = px.bar(df_graf_comp_tasa_global, x="Campa√±a", y="Tasa Sesi√≥n Global (%)", title="Comparativa: Tasa de Sesi√≥n Global", text="Tasa Sesi√≥n Global (%)", color="Campa√±a")
                fig_comp_tsg.update_traces(texttemplate='%{text:.1f}%', textposition='outside')
                fig_comp_tsg.update_layout(xaxis_tickangle=-45)
                st.plotly_chart(fig_comp_tsg, use_container_width=True)
            else: st.caption("No hay datos suficientes para el gr√°fico de tasa de sesi√≥n global comparativa con los filtros actuales.")
            
            st.subheader("Gr√°fico: Volumen de Sesiones Agendadas por Campa√±a (con filtros aplicados)")
            df_graf_comp_vol_sesiones = df_tabla_comp[df_tabla_comp["Sesiones"] > 0].sort_values(by="Sesiones", ascending=False)
            if not df_graf_comp_vol_sesiones.empty:
                fig_comp_vol = px.bar(df_graf_comp_vol_sesiones, x="Campa√±a", y="Sesiones", title="Comparativa: Volumen de Sesiones Agendadas", text="Sesiones", color="Campa√±a")
                fig_comp_vol.update_traces(texttemplate='%{text:,}', textposition='outside')
                fig_comp_vol.update_layout(xaxis_tickangle=-45)
                st.plotly_chart(fig_comp_vol, use_container_width=True)
            else: st.caption("No hay campa√±as con sesiones agendadas para el gr√°fico de volumen comparativo con los filtros actuales.")
        else: st.info("No hay datos suficientes para generar la comparativa entre las campa√±as seleccionadas con los filtros aplicados.")

    st.markdown("### Rendimiento por Prospectador (para la selecci√≥n actual)")
    if "¬øQui√©n Prospecto?" in df_final_analisis_campana.columns:
        # Usar 'prospectos_tras_filtros' que es la salida de calcular_kpis_df_campana
        df_prospectador_camp = df_final_analisis_campana.groupby("¬øQui√©n Prospecto?").apply(lambda x: pd.Series(calcular_kpis_df_campana(x))).reset_index()
        df_prospectador_camp_display = df_prospectador_camp[
            (df_prospectador_camp['prospectos_tras_filtros'] > 0) # Usar el nombre correcto
        ][["¬øQui√©n Prospecto?", "prospectos_tras_filtros", "invites_aceptadas", "respuestas_primer_mensaje", "sesiones_agendadas", "tasa_sesion_global"]].rename(
            columns={"prospectos_tras_filtros": "Prospectos (Tras Filtros)", "invites_aceptadas": "Aceptadas", "respuestas_primer_mensaje": "Respuestas", "sesiones_agendadas": "Sesiones", "tasa_sesion_global": "Tasa Sesi√≥n Global (%)"}
        ).sort_values(by="Sesiones", ascending=False)
        
        cols_enteros_prosp = ["Prospectos (Tras Filtros)", "Aceptadas", "Respuestas", "Sesiones"] # Nombre cambiado
        format_dict_prosp = {"Tasa Sesi√≥n Global (%)": "{:.1f}%"}
        for col_int_prosp in cols_enteros_prosp:
            if col_int_prosp in df_prospectador_camp_display.columns:
                df_prospectador_camp_display[col_int_prosp] = pd.to_numeric(df_prospectador_camp_display[col_int_prosp], errors='coerce').fillna(0).astype(int)
                format_dict_prosp[col_int_prosp] = "{:,}"
        
        if not df_prospectador_camp_display.empty:
            st.dataframe(df_prospectador_camp_display.style.format(format_dict_prosp), use_container_width=True, hide_index=True)
            
            mostrar_grafico_prospectador = False
            if "‚Äì Todos ‚Äì" in st.session_state.campana_filtro_prospectador and len(df_prospectador_camp_display['¬øQui√©n Prospecto?'].unique()) > 1:
                mostrar_grafico_prospectador = True
            elif isinstance(st.session_state.campana_filtro_prospectador, list) and len(st.session_state.campana_filtro_prospectador) > 1 and "‚Äì Todos ‚Äì" not in st.session_state.campana_filtro_prospectador and len(df_prospectador_camp_display['¬øQui√©n Prospecto?'].unique()) > 1:
                mostrar_grafico_prospectador = True
            
            if mostrar_grafico_prospectador:
                fig_prosp_camp_bar = px.bar(df_prospectador_camp_display.sort_values(by="Tasa Sesi√≥n Global (%)", ascending=False), x="¬øQui√©n Prospecto?", y="Tasa Sesi√≥n Global (%)", title="Tasa de Sesi√≥n Global por Prospectador (Selecci√≥n Actual)", text="Tasa Sesi√≥n Global (%)", color="Tasa Sesi√≥n Global (%)") # Considerar color por ¬øQui√©n Prospecto?
                fig_prosp_camp_bar.update_traces(texttemplate='%{text:.1f}%', textposition='outside')
                fig_prosp_camp_bar.update_layout(xaxis_tickangle=-45)
                st.plotly_chart(fig_prosp_camp_bar, use_container_width=True)
        else: st.caption("No hay datos de rendimiento por prospectador para la selecci√≥n actual.")
    else: st.caption("La columna '¬øQui√©n Prospecto?' no est√° disponible.")

    st.markdown("### Detalle de Prospectos (para la selecci√≥n actual)")
    # df_final_analisis_campana contiene los √≠ndices correctos DESPU√âS de todos los filtros
    # df_original_completo tiene todos los datos originales. Usamos los √≠ndices de df_final_analisis_campana para extraer de df_original_completo
    indices_filtrados = df_final_analisis_campana.index 
    # Asegurar que los √≠ndices existen en df_original_completo (si se hizo un reset_index en df_final_analisis_campana sin dropear)
    # O mejor, si df_final_analisis_campana es una copia directa con filtros, sus √≠ndices son los de df_original_completo
    df_detalle_original_filtrado = df_original_completo.loc[df_original_completo.index.isin(indices_filtrados)].copy()


    if not df_detalle_original_filtrado.empty:
        df_display_tabla_campana_detalle = pd.DataFrame()
        # Definir columnas a mostrar y su orden deseado
        cols_a_mostrar_detalle = [
            "Campa√±a", "Avatar", "¬øQui√©n Prospecto?", "Pais", "Fecha de Invite", 
            "¬øInvite Aceptada?", "Fecha Primer Mensaje", "Respuesta Primer Mensaje", 
            "Sesion Agendada?", "Fecha Sesion"
        ]
        # Tomar solo las columnas que existen en el dataframe
        cols_existentes_detalle = [col for col in cols_a_mostrar_detalle if col in df_detalle_original_filtrado.columns]
        
        for col_orig in cols_existentes_detalle: # Iterar solo sobre las columnas seleccionadas
            if pd.api.types.is_datetime64_any_dtype(df_detalle_original_filtrado[col_orig]):
                 df_display_tabla_campana_detalle[col_orig] = pd.to_datetime(df_detalle_original_filtrado[col_orig], errors='coerce').dt.strftime('%d/%m/%Y').fillna("N/A")
            elif pd.api.types.is_numeric_dtype(df_detalle_original_filtrado[col_orig]) and (df_detalle_original_filtrado[col_orig].dropna().apply(lambda x: isinstance(x, float) and x.is_integer()).all() or pd.api.types.is_integer_dtype(df_detalle_original_filtrado[col_orig].dropna())):
                 df_display_tabla_campana_detalle[col_orig] = df_detalle_original_filtrado[col_orig].fillna(0).astype(int).astype(str).replace('0', "N/A") # Considerar no reemplazar 0 con N/A si 0 es un valor v√°lido
            else:
                 df_display_tabla_campana_detalle[col_orig] = df_detalle_original_filtrado[col_orig].astype(str).fillna("N/A")
        
        st.dataframe(df_display_tabla_campana_detalle, height=400, use_container_width=True)
        
        @st.cache_data
        def convertir_df_a_excel_campana_detalle(df_conv):
            output = io.BytesIO()
            # Seleccionar y ordenar columnas tambi√©n para el Excel
            df_excel_export = df_conv[cols_existentes_detalle].copy()
            with pd.ExcelWriter(output, engine='xlsxwriter') as writer:
                df_excel_export.to_excel(writer, index=False, sheet_name='Prospectos_Campa√±a_Detalle')
            return output.getvalue()
        
        excel_data_campana_detalle = convertir_df_a_excel_campana_detalle(df_detalle_original_filtrado) # Pasar el df con todas las columnas originales
        
        nombre_archivo_excel_detalle = f"detalle_campa√±as_{'_'.join(st.session_state.campana_seleccion_principal)}.xlsx"
        if not st.session_state.campana_seleccion_principal: # Evitar nombre de archivo feo si no hay selecci√≥n
            nombre_archivo_excel_detalle = "detalle_campa√±as_sin_seleccion.xlsx"
        else:
            nombre_archivo_excel_detalle = f"detalle_campa√±as_{'_'.join(s.replace(' ', '_') for s in st.session_state.campana_seleccion_principal)}.xlsx"


        st.download_button(label="‚¨áÔ∏è Descargar Detalle de Selecci√≥n Actual (Excel)", data=excel_data_campana_detalle, file_name=nombre_archivo_excel_detalle, mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet", key="download_excel_campana_detalle")
    else: st.caption("No hay prospectos detallados para mostrar con los filtros actuales.")

st.markdown("---")
st.info(
    "Esta maravillosa, ca√≥tica y probablemente sobrecafeinada plataforma ha sido realizada por Johnsito ‚ú® üòä"
)
