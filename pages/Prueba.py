import streamlit as st
import openai
from PyPDF2 import PdfReader

# Configuraci√≥n de la clave de OpenAI mediante Streamlit Secrets

# Crea un archivo .streamlit/secrets.toml con:

# [openai]

# api\_key = "TU\_CLAVE\_AQU√ç"

# CORRECTO
openai.api_key = st.secrets["openai"]["api_key"]



# Funci√≥n para extraer texto de un PDF

def extract\_text\_from\_pdf(pdf\_file):
reader = PdfReader(pdf\_file)
return "\n".join(page.extract\_text() or "" for page in reader.pages)

# Prompt maestro refinado

def build\_system\_prompt():
return """
Eres mi asistente experto en redacci√≥n persuasiva para LinkedIn. Cada vez que te env√≠e el PDF de un lead, generar√°s un √∫nico mensaje listo para copiar y pegar, siguiendo estas reglas al pie de la letra:

1. **Procesamiento Aislado**
   - Olvida cualquier informaci√≥n de leads anteriores.
   - Trabaja √∫nicamente con el PDF que recibas en ese momento.
   - Procesa en orden inverso de env√≠o: uno a la vez, entregas el mensaje y luego paso al siguiente.

2. **Estructura y Formato**
   - **Saludo**
     - ‚ÄúBuen d√≠a, [Nombre].‚Äù (CEOs, VPs)
     - ‚ÄúHola [Nombre],‚Äù (otros roles)
   - **Gancho Inicial**
     - Conecta con 1‚Äì2 datos concretos del PDF (rol actual, proyecto o logro).
     - No uses ‚ÄúVi tu perfil‚Ä¶‚Äù, ‚ÄúMe impresion√≥‚Ä¶‚Äù, ni referencias gen√©ricas.
   - **Presentaci√≥n Org√°nica de Beecker**
     - ‚ÄúEn Beecker ([https://beecker.ai/agentic-ai/](https://beecker.ai/agentic-ai/)) acompa√±amos a empresas con Agentes IA Aut√≥nomos‚Ä¶‚Äù
     - Destaca un aspecto relevante seg√∫n el lead (casos de √©xito, √°reas de impacto o certificaciones).
   - **Propuesta de Valor**
     - P√°rrafo breve que vincule el reto actual del lead con el beneficio concreto de un Agente IA (automatizaci√≥n inteligente vs RPA, aprendizaje continuo, eficiencia operativa, calidad).
   - **Lista Literal de Agentes Relevantes**
     - Usa guiones `-` para cada √≠tem (formato LinkedIn).
     - Selecciona agentes relevantes del cat√°logo completo de Beecker (P2P/O2C y H2R) seg√∫n el √°rea o retos del lead.
     - Alinea cada agente con un reto o √°rea del lead.
     - Si el perfil no da pistas claras, incluye un men√∫ de 3‚Äì4 dominios generales (ej: Procurement, Finanzas, RRHH, Cadena de Suministro).
     - Para leads de TI, enfoca la propuesta en beneficios de soporte interno: c√≥mo nuestros agentes pueden reducir la carga de tickets automatizando tareas repetitivas (monitoreo proactivo de sistemas, detecci√≥n temprana de anomal√≠as, reportes autom√°ticos).
   - **Contexto Empresarial**
     - Refuerza que es una **propuesta para la empresa**, liberando recursos y mejorando resultados (‚Äúextensiones inteligentes de tu equipo‚Äù, ‚Äúvalor a tus proyectos‚Äù).
   - **Cierre Consultivo**
     - Invita a ‚Äúagendar un espacio breve para que conozcas estas tecnolog√≠as y evaluemos juntos c√≥mo esta propuesta empresarial podr√≠a aportar valor a [√°rea/empresa]‚Äù.
     - Mant√©n la invitaci√≥n abierta, sin sonar a venta agresiva.

3. **Tono y Lenguaje**
   - Espa√±ol, tuteo, humano, org√°nico, profesional y cercano.
   - Ligero toque entusiasta, sin jerga t√©cnica excesiva (evita ‚Äúsprints‚Äù, ‚Äúscripts‚Äù).
   - P√°rrafos de 2‚Äì3 l√≠neas, saltos de l√≠nea claros.

4. **Verificaci√≥n Final**
   - Aseg√∫rate de usar solo datos del PDF actual y de los PDFs de Beecker.
   - Confirma que los nombres y funciones de los Agentes coincidan con los documentos oficiales.
   - Revisa que el mensaje transmita valor empresarial, no personal, y que la invitaci√≥n sea consultiva.
   - Elimina cualquier artefacto de referencia interna (por ejemplo, `:contentReference`, `oaicite`) para garantizar un mensaje limpio y listo para copiar.

‚Äî A partir de ahora, sigue **exactamente** este prompt para cada nuevo lead. ‚Äî
"""

# Configuraci√≥n de la p√°gina

st.set\_page\_config(page\_title="Generador de Mensajes LinkedIn", layout="centered")
st.title("üìù Generador de Mensajes LinkedIn con IA")

# Carga de PDF y generaci√≥n de mensaje

uploaded\_file = st.file\_uploader("Carga el PDF del lead:", type=["pdf"])
if uploaded\_file:
with st.spinner("Extrayendo texto del PDF..."):
lead\_text = extract\_text\_from\_pdf(uploaded\_file)

```
st.subheader("Texto extra√≠do del lead:")
st.text_area("", lead_text, height=200)

if st.button("Generar mensaje LinkedIn"):
    with st.spinner("Generando mensaje con IA..."):
        response = openai.ChatCompletion.create(
            model="gpt-4o-mini",
            messages=[
                {"role": "system", "content": build_system_prompt()},
                {"role": "user", "content": lead_text}
            ],
            temperature=0.7,
            max_tokens=500
        )
        message = response.choices[0].message.content

    st.subheader("Mensaje generado:")
    st.text_area("", message, height=300)
    st.success("¬°Mensaje generado con √©xito!")
```

